package london

import (
	"bytes"
	"encoding/binary"
	"testing"
)

func setVolumeTest(block string, vol int, correct []byte) func(t *testing.T) {
	return func(t *testing.T) {
		vol *= volumeScaleFactor
		data := make([]byte, 4)
		binary.BigEndian.PutUint32(data, uint32(vol))

		cmd, err := buildCommand(methodSetPercent, stateGain, block, data)
		if err != nil {
			t.Fatalf("unable to build command: %v", err)
		}

		if !bytes.Equal(cmd, correct) {
			t.Fatalf("incorrect command.\ngot:\t\t0x%x\nexpected:\t0x%x\n", cmd, correct)
		}
	}
}

func TestBuildingSetVolume(t *testing.T) {
	t.Run("0", setVolumeTest("000100", 0, []byte{0x02, 0x8d, 0x00, 0x00, 0x1b, 0x83, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x03}))
	t.Run("30", setVolumeTest("000101", 30, []byte{0x02, 0x8d, 0x00, 0x00, 0x1b, 0x83, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x90, 0x03}))
	t.Run("50", setVolumeTest("000102", 50, []byte{0x02, 0x8d, 0x00, 0x00, 0x1b, 0x83, 0x00, 0x01, 0x1b, 0x82, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xbf, 0x03}))
	t.Run("75", setVolumeTest("000103", 75, []byte{0x02, 0x8d, 0x00, 0x00, 0x1b, 0x83, 0x00, 0x01, 0x1b, 0x83, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0xc7, 0x03}))
	t.Run("100", setVolumeTest("00010e", 100, []byte{0x02, 0x8d, 0x00, 0x00, 0x1b, 0x83, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0xe5, 0x03}))
}
